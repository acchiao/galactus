---
name: CI

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_URL: registry.digitalocean.com
  PROJECT_NAME: galactus

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v1
        with:
          install: true
      - uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_TOKEN }}
          password: ${{ secrets.REGISTRY_TOKEN }}
          logout: true
      - uses: docker/metadata-action@v3
        id: meta
        with:
          images: ${{ env.REGISTRY_URL }}/${{ secrets.REGISTRY_NAME }}/${{ env.PROJECT_NAME }}
          flavor: |
            latest=true
            prefix=
            suffix=
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=schedule,pattern={{date 'YYYYMMDD'}}
            type=semver,pattern=v{{version}}
            type=semver,pattern={{raw}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}.{{minor}}.{{patch}}
            type=sha,prefix=,suffix=,format=long
            type=sha,prefix=,suffix=,format=short
      - uses: docker/build-push-action@v2
        id: build
        with:
          context: .
          push: true
          file: Dockerfile
          secrets: |
            "auth=${{ secrets.COMPOSER_AUTH }}"
          target: app
          cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/${{ secrets.REGISTRY_NAME }}/${{ env.PROJECT_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/${{ secrets.REGISTRY_NAME }}/${{ env.PROJECT_NAME }}:buildcache,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - run: echo ${{ steps.build.outputs.digest }}

  test:
    runs-on: ubuntu-20.04
    env:
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PASSWORD: postgres
      DB_USERNAME: postgres
      DB_DATABASE: postgres
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: mbstring, dom, fileinfo, pgsql
          coverage: xdebug
      - id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - run: composer install --no-progress --prefer-dist --optimize-autoloader
      - run: |
          php -r "file_exists('.env') || copy('.env.template', '.env');"
          php artisan key:generate
      - run: php artisan config:clear
      - run: php artisan migrate -v
        env:
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      - run: vendor/bin/phpunit --coverage-text
        env:
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}

  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-helm@v1
        with:
          version: v3.8.1
      - run: |
          helm dependency update charts/galactus
          helm lint charts/galactus
      - uses: stackrox/kube-linter-action@v1
        continue-on-error: true
        with:
          directory: charts/galactus

  kubeval:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-helm@v1
        with:
          version: v3.8.1
      - run: |
          wget --no-verbose --show-progress --progress dot:giga https://github.com/instrumenta/kubeval/releases/download/v0.16.1/kubeval-linux-amd64.tar.gz
          echo "2d6f9bda1423b93787fa05d9e8dfce2fc1190fefbcd9d0936b9635f3f78ba790  kubeval-linux-amd64.tar.gz" | sha256sum --check
          tar xf kubeval-linux-amd64.tar.gz
          mv kubeval /usr/local/bin
      - run: |
          helm dependency update charts/galactus
          helm template charts/galactus | kubeval

  kubeaudit:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-helm@v1
        with:
          version: v3.8.1
      - run: |
          wget --no-verbose --show-progress --progress dot:giga https://github.com/Shopify/kubeaudit/releases/download/0.16.0/kubeaudit_0.16.0_linux_amd64.tar.gz
          echo "f8e9fe2c34897edeac44169f9d33fa492b251c595284eddfe9de494a3a0219fe  kubeaudit_0.16.0_linux_amd64.tar.gz" | sha256sum --check
          tar xf kubeaudit_0.16.0_linux_amd64.tar.gz
          mv kubeaudit /usr/local/bin
      - run: |
          helm dependency update charts/galactus
          helm template charts/galactus > manifest.yml
          kubeaudit all --manifest manifests/galactus.yml

  ct-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: azure/setup-helm@v1
        with:
          version: v3.8.0
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - uses: helm/chart-testing-action@v2.3.1
      - id: list-changed
        run: |
          changed=$(ct list-changed --config ct.yaml)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi
      - run: ct lint --config ct.yaml

  ct-test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: azure/setup-helm@v1
        with:
          version: v3.8.1
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - uses: helm/chart-testing-action@v2.3.1
      - id: list-changed
        run: |
          changed=$(ct list-changed --config ct.yaml)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi
      - run: ct lint --config ct.yaml
      - uses: helm/kind-action@v1.2.0
        if: steps.list-changed.outputs.changed == 'true'
      - run: ct install --config ct.yaml
